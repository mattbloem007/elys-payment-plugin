{"id":"WF2I","dependencies":[{"name":"/Users/gabriel/Documents/paymentelys/package.json","includedInParent":true,"mtime":1631701303199},{"name":"/Users/gabriel/Documents/paymentelys/node_modules/cids/package.json","includedInParent":true,"mtime":1629877553341},{"name":"buffer","loc":{"line":3,"column":27},"parent":"/Users/gabriel/Documents/paymentelys/node_modules/cids/src/index.js","resolved":"/Users/gabriel/Documents/paymentelys/node_modules/node-libs-browser/node_modules/buffer/index.js"},{"name":"multihashes","loc":{"line":4,"column":19},"parent":"/Users/gabriel/Documents/paymentelys/node_modules/cids/src/index.js","resolved":"/Users/gabriel/Documents/paymentelys/node_modules/multihashes/src/index.js"},{"name":"multibase","loc":{"line":5,"column":26},"parent":"/Users/gabriel/Documents/paymentelys/node_modules/cids/src/index.js","resolved":"/Users/gabriel/Documents/paymentelys/node_modules/cids/node_modules/multibase/src/index.js"},{"name":"multicodec","loc":{"line":6,"column":27},"parent":"/Users/gabriel/Documents/paymentelys/node_modules/cids/src/index.js","resolved":"/Users/gabriel/Documents/paymentelys/node_modules/cids/node_modules/multicodec/src/index.js"},{"name":"multicodec/src/base-table.json","loc":{"line":7,"column":23},"parent":"/Users/gabriel/Documents/paymentelys/node_modules/cids/src/index.js","resolved":"/Users/gabriel/Documents/paymentelys/node_modules/cids/node_modules/multicodec/src/base-table.json"},{"name":"./cid-util","loc":{"line":8,"column":24},"parent":"/Users/gabriel/Documents/paymentelys/node_modules/cids/src/index.js","resolved":"/Users/gabriel/Documents/paymentelys/node_modules/cids/src/cid-util.js"},{"name":"class-is","loc":{"line":9,"column":23},"parent":"/Users/gabriel/Documents/paymentelys/node_modules/cids/src/index.js","resolved":"/Users/gabriel/Documents/paymentelys/node_modules/class-is/index.js"}],"generated":{"js":"\n\"use strict\";const{Buffer:t}=require(\"buffer\"),e=require(\"multihashes\"),i=require(\"multibase\"),s=require(\"multicodec\"),r=require(\"multicodec/src/base-table.json\"),o=require(\"./cid-util\"),h=require(\"class-is\");class n{constructor(r,o,h,c){if(a.isCID(r)){const e=r;return this.version=e.version,this.codec=e.codec,this.multihash=t.from(e.multihash),void(this.multibaseName=e.multibaseName||(0===e.version?\"base58btc\":\"base32\"))}if(\"string\"==typeof r){const t=i.isEncoded(r);if(t){const e=i.decode(r);this.version=parseInt(e.slice(0,1).toString(\"hex\"),16),this.codec=s.getCodec(e.slice(1)),this.multihash=s.rmPrefix(e.slice(1)),this.multibaseName=t}else this.version=0,this.codec=\"dag-pb\",this.multihash=e.fromB58String(r),this.multibaseName=\"base58btc\";return n.validateCID(this),void Object.defineProperty(this,\"string\",{value:r})}if(t.isBuffer(r)){const t=r.slice(0,1),e=parseInt(t.toString(\"hex\"),16);if(1===e){const t=r;this.version=e,this.codec=s.getCodec(t.slice(1)),this.multihash=s.rmPrefix(t.slice(1)),this.multibaseName=\"base32\"}else this.version=0,this.codec=\"dag-pb\",this.multihash=r,this.multibaseName=\"base58btc\";n.validateCID(this)}else this.version=r,this.codec=o,this.multihash=h,this.multibaseName=c||(0===r?\"base58btc\":\"base32\"),n.validateCID(this)}get buffer(){let e=this._buffer;if(!e){if(0===this.version)e=this.multihash;else{if(1!==this.version)throw new Error(\"unsupported version\");e=t.concat([t.from(\"01\",\"hex\"),s.getCodeVarint(this.codec),this.multihash])}Object.defineProperty(this,\"_buffer\",{value:e})}return e}get prefix(){return t.concat([t.from(`0${this.version}`,\"hex\"),s.getCodeVarint(this.codec),e.prefix(this.multihash)])}toV0(){if(\"dag-pb\"!==this.codec)throw new Error(\"Cannot convert a non dag-pb CID to CIDv0\");const{name:t,length:i}=e.decode(this.multihash);if(\"sha2-256\"!==t)throw new Error(\"Cannot convert non sha2-256 multihash CID to CIDv0\");if(32!==i)throw new Error(\"Cannot convert non 32 byte multihash CID to CIDv0\");return new a(0,this.codec,this.multihash)}toV1(){return new a(1,this.codec,this.multihash)}toBaseEncodedString(t=this.multibaseName){if(this.string&&t===this.multibaseName)return this.string;let s=null;if(0===this.version){if(\"base58btc\"!==t)throw new Error(\"not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()\");s=e.toB58String(this.multihash)}else{if(1!==this.version)throw new Error(\"unsupported version\");s=i.encode(t,this.buffer).toString()}return t===this.multibaseName&&Object.defineProperty(this,\"string\",{value:s}),s}[Symbol.for(\"nodejs.util.inspect.custom\")](){return\"CID(\"+this.toString()+\")\"}toString(t){return this.toBaseEncodedString(t)}toJSON(){return{codec:this.codec,version:this.version,hash:this.multihash}}equals(t){return this.codec===t.codec&&this.version===t.version&&this.multihash.equals(t.multihash)}static validateCID(t){const e=o.checkCIDComponents(t);if(e)throw new Error(e)}}const a=h(n,{className:\"CID\",symbolName:\"@ipld/js-cid/CID\"});a.codecs=r,module.exports=a;"},"sourceMaps":null,"error":null,"hash":"1e98f5aed1e635187d64b6107791c2f4","cacheData":{"env":{}}}